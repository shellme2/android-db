package com.eebbk.bfc.db.demo.db.entity;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.eebbk.bfc.db.demo.db.entity.BookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "book_table".
*/
public class BookInfoDao extends AbstractDao<BookInfo, String> {

    public static final String TABLENAME = "book_table";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BookId = new Property(0, String.class, "bookId", true, "BOOK_ID");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "BOOK_NAME");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
    };

    private Query<BookInfo> userInfo_BookInfoListQuery;

    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"book_table\" (" + //
                "\"BOOK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: bookId
                "\"BOOK_NAME\" TEXT," + // 1: bookName
                "\"USER_ID\" TEXT);"); // 2: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"book_table\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.setBookId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BookInfo entity, long rowId) {
        return entity.getBookId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BookInfo entity) {
        if(entity != null) {
            return entity.getBookId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bookInfoList" to-many relationship of UserInfo. */
    public List<BookInfo> _queryUserInfo_BookInfoList(String userId) {
        synchronized (this) {
            if (userInfo_BookInfoListQuery == null) {
                QueryBuilder<BookInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                userInfo_BookInfoListQuery = queryBuilder.build();
            }
        }
        Query<BookInfo> query = userInfo_BookInfoListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
